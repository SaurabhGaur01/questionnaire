{"version":3,"sources":["constants/steps.js","ducks/stepsLength.js","ducks/completedSteps.js","ducks/activeStep.js","components/Shared/AppStepper.jsx","ducks/userInput/inputAddress.js","ducks/userInput/inputName.js","ducks/userInput/inputOccupation.js","ducks/userInput/inputEmail.js","ducks/userInput/inputChildren.js","ducks/userInput/hasChildren.js","components/ResetAction.jsx","thunks/handleReset.js","components/Result.jsx","components/Shared/ActionBar.jsx","ducks/loadingStatus.js","ducks/searchResults.js","thunks/handleResult.js","components/CustomerInputs/UserName.jsx","components/CustomerInputs/UserChildren.jsx","components/CustomerInputs/UserEmail.jsx","components/CustomerInputs/UserAddress.jsx","components/CustomerInputs/UserOccupation.jsx","components/GetStepContent.jsx","components/Questionnaire.jsx","reducers/userInput.js","reducers/index.js","index.js"],"names":["QUESTIONNAIRE_STEPS","LOADING_ERROR","LOADING_IN_PROGRESS","LOADING_SUCCESS","BASE_URL","SET_STEPS_LENGTH","SET_STEP_AS_COMPLETED","CLEAR_STEP_AS_COMPLETED","SET_ACTIVE_STEP","setActiveStep","value","type","mapDispatchAsProps","actionSetActiveStep","hocChain","compose","connect","state","completedSteps","activeStep","steps","Stepper","nonLinear","map","label","index","Step","StepButton","id","onClick","step","completed","SET_ADDRESS","CLEAR_ADDRESS","SET_NAME","CLEAR_NAME","SET_OCCUPATION","CLEAR_OCCUPATION","SET_EMAIL","CLEAR_EMAIL","SET_CHILDREN","CLEAR_CHILDREN","HAVE_CHILDREN","DONT_HAVE_CHILDREN","actionHandleReset","dispatch","className","searchResults","loadingStatus","Fragment","role","aria-valuenow","aria-valuemin","aria-valuemax","price","amount","periodicity","split","join","toLowerCase","stepsLength","handleComplete","disabled","Object","keys","length","SET_LOADING_IN_PROGRESS","SET_LOADING_SUCCESS","SET_LOADING_ERROR","SET_SEARCH_RESULTS","CLEAR_SEARCH_RESULTS","setSearchResults","data","handleResult","getState","a","axios","post","userInput","headers","token","jwt","get","Authorization","actionSetName","firstName","placeholder","onChange","event","target","actionSetChildren","actionSetChildrenPresent","numberOfChildren","hasChildren","handleChange","name","checked","parseInt","actionSetEmail","email","actionSetAddress","address","actionSetOccupation","occupation","actionSetStepsLength","actionSetStepAsCompleted","actionHandleResult","React","useEffect","allStepsCompleted","newCompleted","newActiveStep","findIndex","i","handleNext","combineReducers","action","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.97beed3f.chunk.js","sourcesContent":["export const QUESTIONNAIRE_STEPS = [\r\n    'Step-1', \r\n    'Step-2', \r\n    'Step-3', \r\n    'Step-4', \r\n    'Step-5'\r\n];\r\n\r\nexport const LOADING_ERROR = \"ERROR\";\r\nexport const LOADING_IN_PROGRESS = \"LOADING\";\r\nexport const LOADING_SUCCESS = \"SUCCESS\";\r\nexport const BASE_URL = \"https://challenge-dot-popsure-204813.appspot.com\";","import { QUESTIONNAIRE_STEPS } from '../constants/steps';\r\n\r\nexport const SET_STEPS_LENGTH = 'modules/questionnaire-app/SET_STEPS_LENGTH';\r\n\r\nexport const setStepsLength = () => ({\r\n    type: SET_STEPS_LENGTH\r\n});\r\n\r\nexport const stepsLengthReducer = (state = 0, action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_STEPS_LENGTH:\r\n            return QUESTIONNAIRE_STEPS.length;\r\n        default:\r\n            return state;  \r\n    }\r\n}","export const SET_STEP_AS_COMPLETED = 'modules/questionnaire-app/SET_STEP_AS_COMPLETED';\r\nexport const CLEAR_STEP_AS_COMPLETED = 'modules/questionnaire-app/CLEAR_STEP_AS_COMPLETED';\r\n\r\nexport const setStepAsCompleted = data => ({\r\n    type: SET_STEP_AS_COMPLETED,\r\n    data\r\n});\r\n\r\nexport const clearStepAsCompleted = () => ({\r\n    type: CLEAR_STEP_AS_COMPLETED,\r\n});\r\n\r\nexport const completedStepsReducer = (state = {}, action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_STEP_AS_COMPLETED:\r\n            return action.data;\r\n        case CLEAR_STEP_AS_COMPLETED:\r\n            return {};    \r\n        default:\r\n            return state;  \r\n    }\r\n}","export const SET_ACTIVE_STEP = 'modules/questionnaire-app/SET_ACTIVE_STEP';\r\n\r\nexport const setActiveStep = value => ({\r\n    type: SET_ACTIVE_STEP,\r\n    value,\r\n});\r\n\r\nexport const activeStepReducer = (state = 0, action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_ACTIVE_STEP:\r\n            return action.value;\r\n        default:\r\n            return state;  \r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport PropTypes from 'prop-types';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport { setActiveStep } from '../../ducks/activeStep';\r\n\r\nconst AppStepper = ({ \r\n    activeStep,\r\n    completedSteps,\r\n    steps,\r\n    actionSetActiveStep\r\n}) =>{\r\n    const handleStep = (step) => () => {\r\n        actionSetActiveStep(step);\r\n    };\r\n\r\n    return (\r\n        <Stepper nonLinear activeStep={activeStep}>\r\n            {steps.map((label, index) => (\r\n                <Step key={label}>\r\n                    <StepButton id=\"step-button\" onClick={handleStep(index)} completed={completedSteps[index]}>\r\n                        {label}\r\n                    </StepButton>\r\n                </Step>\r\n            ))}\r\n        </Stepper>\r\n    );\r\n}    \r\n\r\nAppStepper.propTypes = {\r\n    activeStep: PropTypes.number.isRequired,\r\n    completedSteps: PropTypes.shape({}).isRequired,\r\n    steps: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    actionSetActiveStep: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetActiveStep: setActiveStep,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    completedSteps: state.completedSteps,\r\n    activeStep: state.activeStep,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { AppStepper as TestableAppStepper };\r\n\r\nexport default hocChain(AppStepper);","export const SET_ADDRESS = 'modules/questionnaire-app/SET_ADDRESS';\r\nexport const CLEAR_ADDRESS = 'modules/questionnaire-app/CLEAR_ADDRESS';\r\n\r\nexport const setAddress = value => ({\r\n    type: SET_ADDRESS,\r\n    value,\r\n});\r\n\r\nexport const clearAddress = () => ({\r\n    type: CLEAR_ADDRESS,\r\n});\r\n\r\nexport const inputAddressReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_ADDRESS:\r\n            return action.value;\r\n        case CLEAR_ADDRESS:\r\n            return \"\";\r\n        default:\r\n            return state;               \r\n    }\r\n};","export const SET_NAME = 'modules/questionnaire-app/SET_NAME';\r\nexport const CLEAR_NAME = 'modules/questionnaire-app/CLEAR_NAME';\r\n\r\nexport const setName = value => ({\r\n    type: SET_NAME,\r\n    value,\r\n});\r\n\r\nexport const clearName = () => ({\r\n    type: CLEAR_NAME,\r\n});\r\n\r\nexport const inputNameReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_NAME:\r\n            return action.value;\r\n        case CLEAR_NAME:\r\n            return \"\";\r\n        default:\r\n            return state;               \r\n    }\r\n};","export const SET_OCCUPATION = 'modules/questionnaire-app/SET_OCCUPATION';\r\nexport const CLEAR_OCCUPATION = 'modules/questionnaire-app/CLEAR_OCCUPATION';\r\n\r\nexport const setOccupation = value => ({\r\n    type: SET_OCCUPATION,\r\n    value,\r\n});\r\n\r\nexport const clearOccupation = () => ({\r\n    type: CLEAR_OCCUPATION,\r\n});\r\n\r\nexport const inputOccupationReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_OCCUPATION:\r\n            return action.value;\r\n        case CLEAR_OCCUPATION:\r\n            return \"\";\r\n        default:\r\n            return state;               \r\n    }\r\n};","export const SET_EMAIL = 'modules/questionnaire-app/SET_EMAIL';\r\nexport const CLEAR_EMAIL = 'modules/questionnaire-app/CLEAR_EMAIL';\r\n\r\nexport const setEmail = value => ({\r\n    type: SET_EMAIL,\r\n    value,\r\n});\r\n\r\nexport const clearEmail = () => ({\r\n    type: CLEAR_EMAIL,\r\n});\r\n\r\nexport const inputEmailReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_EMAIL:\r\n            return action.value;\r\n        case CLEAR_EMAIL:\r\n            return \"\";\r\n        default:\r\n            return state;               \r\n    }\r\n};","export const SET_CHILDREN = 'modules/questionnaire-app/SET_CHILDREN';\r\nexport const CLEAR_CHILDREN = 'modules/questionnaire-app/CLEAR_CHILDREN';\r\n\r\nexport const setChildren = value => ({\r\n    type: SET_CHILDREN,\r\n    value,\r\n});\r\n\r\nexport const clearChildren = () => ({\r\n    type: CLEAR_CHILDREN,\r\n});\r\n\r\nexport const inputChildrenReducer = (state = 0, action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_CHILDREN:\r\n            return action.value;\r\n        case CLEAR_CHILDREN:\r\n            return 0;\r\n        default:\r\n            return state;               \r\n    }\r\n};","export const HAVE_CHILDREN = 'modules/questionnaire-app/HAVE_CHILDREN';\r\nexport const DONT_HAVE_CHILDREN = 'modules/questionnaire-app/DONT_HAVE_CHILDREN';\r\n\r\nexport const setChildrenPresent = value => ({\r\n    type: HAVE_CHILDREN,\r\n    value\r\n});\r\n\r\nexport const setChildrenNotPresent = () => ({\r\n    type: DONT_HAVE_CHILDREN,\r\n});\r\n\r\nexport const hasChildrenReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case HAVE_CHILDREN:\r\n            return action.value;\r\n        case DONT_HAVE_CHILDREN:\r\n            return \"\";\r\n        default:\r\n            return state;               \r\n    }\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport handleReset from '../thunks/handleReset';\r\n\r\nconst ResetAction = ({\r\n    actionHandleReset,\r\n}) => {\r\n    const handleReset = () => {\r\n        actionHandleReset();\r\n    };\r\n\r\n    return (\r\n        <div className=\"action-buttons\">\r\n            <button \r\n                id =\"reset-button\" \r\n                type=\"button\" \r\n                className=\"btn btn-primary\"\r\n                onClick={handleReset}\r\n            >\r\n                Reset\r\n            </button>\r\n        </div>  \r\n    );\r\n}\r\n\r\nResetAction.propTypes = {\r\n    actionHandleReset: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchAsProps = {\r\n    actionHandleReset: handleReset,\r\n}\r\n\r\nconst hocChain = compose(\r\n    connect(null, mapDispatchAsProps),\r\n);\r\n\r\nexport { ResetAction as TestableResetAction };\r\n\r\nexport default hocChain(ResetAction);","import { clearAddress } from '../ducks/userInput/inputAddress';\r\nimport { clearName } from '../ducks/userInput/inputName';\r\nimport { clearOccupation } from '../ducks/userInput/inputOccupation';\r\nimport { clearEmail } from '../ducks/userInput/inputEmail';\r\nimport { clearChildren } from '../ducks/userInput/inputChildren';\r\nimport { setChildrenNotPresent } from '../ducks/userInput/hasChildren';\r\nimport { clearStepAsCompleted } from '../ducks/completedSteps';\r\nimport { setActiveStep } from '../ducks/activeStep';\r\n\r\nconst handleReset = () => (dispatch) => {\r\n    dispatch(clearAddress());\r\n    dispatch(clearName());\r\n    dispatch(clearOccupation());\r\n    dispatch(clearEmail());\r\n    dispatch(clearChildren());\r\n    dispatch(setChildrenNotPresent());\r\n    dispatch(clearStepAsCompleted());\r\n    dispatch(setActiveStep(0));\r\n};\r\n\r\nexport default handleReset;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { LOADING_ERROR, LOADING_IN_PROGRESS } from '../constants/steps';\r\nimport ResetAction from './ResetAction';\r\n\r\nconst Result = ({ \r\n    searchResults,\r\n    loadingStatus,\r\n}) => {\r\n    if(loadingStatus === LOADING_ERROR) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    There is an error, Please try again after sometime\r\n                </div>\r\n                <ResetAction />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    if(loadingStatus === LOADING_IN_PROGRESS){\r\n        return (\r\n            <div className=\"progress\">\r\n                <div \r\n                    className=\"progress-bar progress-bar-striped bg-success progress-bar\" \r\n                    role=\"progressbar\" \r\n                    aria-valuenow=\"25\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\" />\r\n            </div> \r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card mt-3\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"result-heading\">We got your recommendation</div>\r\n                    <div className=\"result-sub-heading\">Based on your answers, this is what make sense for you and what you should pay.</div>\r\n                    {\r\n                        searchResults.map(({ type, price: { amount, periodicity }}, index) => (\r\n                            <div className=\"card mt-2 mb-2\" key={index}>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"inner-content\">\r\n                                        <div className=\"row-1\">{type.split('_').join(' ')}</div>\r\n                                        <div className=\"row-1\">£{amount} per {periodicity.toLowerCase()}</div>\r\n                                    </div>\r\n                                </div>    \r\n                            </div>    \r\n                        ))\r\n                    }\r\n                </div>    \r\n            </div>\r\n        \r\n            <ResetAction />       \r\n        </React.Fragment> \r\n    );\r\n}    \r\n\r\nResult.propTypes = {\r\n    searchResults: PropTypes.arrayOf(PropTypes.shape({\r\n        type: PropTypes.string.isRequired,\r\n        price: PropTypes.shape({\r\n            amount: PropTypes.number.isRequired,\r\n            periodicity: PropTypes.string.isRequired,\r\n        })\r\n    })),\r\n    loadingStatus: PropTypes.string.isRequired,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    searchResults: state.searchResults,\r\n    loadingStatus: state.loadingStatus,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps),\r\n);\r\n\r\nexport { Result as TestableResult };\r\n\r\nexport default hocChain(Result);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport PropTypes from 'prop-types';\r\nimport { setActiveStep } from '../../ducks/activeStep';\r\n\r\nconst ActionBar = ({\r\n    activeStep,\r\n    handleComplete,\r\n    stepsLength,\r\n    completedSteps,\r\n    actionSetActiveStep,\r\n}) => {\r\n    const handleBack = () => {\r\n        actionSetActiveStep(activeStep - 1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"action-buttons\">\r\n            <button \r\n                id =\"back-button\" \r\n                type=\"button\" \r\n                className=\"btn btn-secondary\"\r\n                disabled={activeStep === 0} \r\n                onClick={handleBack}\r\n            >\r\n                Back\r\n            </button>\r\n            <button \r\n                id =\"complete-button\" \r\n                type=\"button\" \r\n                className=\"btn btn-primary\"\r\n                onClick={handleComplete}\r\n            >\r\n            {\r\n                Object.keys(completedSteps).length === stepsLength - 1 \r\n                ? 'Finish' : 'Next'\r\n            }\r\n            </button>\r\n        </div> \r\n    )\r\n}\r\n\r\nActionBar.propTypes = {\r\n    stepsLength: PropTypes.number.isRequired,\r\n    activeStep: PropTypes.number.isRequired,\r\n    handleComplete: PropTypes.func.isRequired,\r\n    actionSetActiveStep: PropTypes.func.isRequired,\r\n    completedSteps: PropTypes.shape({}).isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetActiveStep: setActiveStep,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    stepsLength: state.stepsLength,\r\n    completedSteps: state.completedSteps,\r\n    activeStep: state.activeStep,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { ActionBar as TestableActionBar };\r\n\r\nexport default hocChain(ActionBar);","import { LOADING_ERROR, LOADING_IN_PROGRESS, LOADING_SUCCESS } from '../constants/steps';\r\n\r\nexport const SET_LOADING_IN_PROGRESS = 'modules/questionnaire-app/SET_LOADING_IN_PROGRESS';\r\nexport const SET_LOADING_SUCCESS = 'modules/questionnaire-app/SET_LOADING_SUCCESS';\r\nexport const SET_LOADING_ERROR = 'modules/questionnaire-app/SET_LOADING_ERROR';\r\n\r\nexport const setLoadingInProgress = () => ({\r\n    type: SET_LOADING_IN_PROGRESS,\r\n});\r\n\r\nexport const setLoadingSuccess = () => ({\r\n    type: SET_LOADING_SUCCESS,\r\n});\r\n\r\nexport const setLoadingError = () => ({\r\n    type: SET_LOADING_ERROR,\r\n});\r\n\r\nexport const loadingStatusReducer = (state = \"\", action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_LOADING_IN_PROGRESS:\r\n            return LOADING_IN_PROGRESS;\r\n        case SET_LOADING_SUCCESS:\r\n            return LOADING_SUCCESS;\r\n        case SET_LOADING_ERROR:\r\n            return LOADING_ERROR;         \r\n        default:\r\n            return state;  \r\n    }\r\n}","export const SET_SEARCH_RESULTS = 'modules/questionnaire-app/SET_SEARCH_RESULTS';\r\nexport const CLEAR_SEARCH_RESULTS = 'modules/questionnaire-app/CLEAR_SEARCH_RESULTS';\r\n\r\nexport const setSearchResults = data => ({\r\n    type: SET_SEARCH_RESULTS,\r\n    data\r\n});\r\n\r\nexport const clearSearchResults = () => ({\r\n    type: CLEAR_SEARCH_RESULTS,\r\n});\r\n\r\nexport const searchResultsReducer = (state = [], action = { type: 'NULL_ACTION'}) => {\r\n    switch (action.type){\r\n        case SET_SEARCH_RESULTS:\r\n            return action.data;\r\n        case CLEAR_SEARCH_RESULTS:\r\n            return [];    \r\n        default:\r\n            return state;  \r\n    }\r\n}","import axios from 'axios';\r\nimport { setLoadingError, setLoadingInProgress, setLoadingSuccess } from '../ducks/loadingStatus';\r\nimport { setSearchResults } from '../ducks/searchResults';\r\nimport { BASE_URL } from '../constants/steps';\r\n\r\nconst handleResult = () => async (dispatch, getState) => {\r\n    dispatch(setLoadingInProgress());\r\n    try {\r\n        // first call to get the JWT token\r\n        const { data: { jwt: token}} = await axios.post(\r\n            BASE_URL+'/user', getState().userInput,\r\n            {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n        );\r\n\r\n        // second call to get the data\r\n        const { data } = await axios.get(\r\n            BASE_URL+'/recommendation',\r\n            {  \r\n                headers: { Authorization: `Bearer ${token}` } \r\n            }\r\n        );\r\n        dispatch(setSearchResults(data));\r\n        dispatch(setLoadingSuccess());\r\n    } catch (error) {\r\n        // handling errors gracefully if any api fails so that UI will remain clean for endusers\r\n        dispatch(setLoadingError());\r\n    }\r\n}\r\n\r\nexport default handleResult;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setName } from '../../ducks/userInput/inputName';\r\n\r\nconst UserName = ({\r\n    actionSetName,\r\n    firstName,\r\n}) =>{\r\n    const addName = event => {\r\n        actionSetName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card card-container\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\"> What's your First Name ?</h5>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                        id=\"userName-required\" \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        placeholder=\"User Name\" \r\n                        onChange={addName}\r\n                        value={firstName}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nUserName.propTypes = {\r\n    actionSetName: PropTypes.func.isRequired,\r\n    firstName: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetName: setName,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    firstName: state.userInput.firstName,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { UserName as TestableUserName };\r\n\r\nexport default hocChain(UserName);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setChildren } from '../../ducks/userInput/inputChildren';\r\nimport { setChildrenPresent } from '../../ducks/userInput/hasChildren';\r\n\r\nconst UserChildren = ({\r\n    actionSetChildren,\r\n    numberOfChildren,\r\n    actionSetChildrenPresent,\r\n    hasChildren,\r\n}) =>{\r\n    const handleChange = (event) => {\r\n        actionSetChildrenPresent(event.target.value);\r\n    };\r\n\r\n    const handleNoOfChildren = (event) => {\r\n        actionSetChildren(parseInt(event.target.value));\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-container\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Do you have any children ?</h5>\r\n                <div className=\"form-check\">\r\n                    <input \r\n                        className=\"form-check-input\" \r\n                        type=\"radio\" \r\n                        name=\"children\" \r\n                        value=\"yes\"\r\n                        checked={hasChildren === \"yes\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <label className=\"form-check-label\">\r\n                        Yes\r\n                    </label>\r\n                </div>\r\n\r\n                <div className=\"form-check\">    \r\n                    <input \r\n                        className=\"form-check-input\" \r\n                        type=\"radio\" \r\n                        name=\"children\" \r\n                        value=\"no\"\r\n                        checked={hasChildren === \"no\"}\r\n                        onChange={handleChange} \r\n                    />\r\n                    <label className=\"form-check-label\">\r\n                        No\r\n                    </label>\r\n                </div>\r\n                {\r\n                    hasChildren === 'yes' && (\r\n                        <div className=\"mt-5\">\r\n                            <h5 className=\"card-title\"> How many children do you have ?</h5>\r\n                            <div className=\"form-group\">\r\n                                <input \r\n                                    id=\"children-number\" \r\n                                    className=\"form-control\" \r\n                                    type=\"number\" \r\n                                    placeholder=\"No of Children\" \r\n                                    onChange={handleNoOfChildren}\r\n                                    value={numberOfChildren}\r\n                                />\r\n                            </div>\r\n                        </div> \r\n                    )\r\n                }   \r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nUserChildren.propTypes = {\r\n    actionSetChildren: PropTypes.func.isRequired,\r\n    numberOfChildren: PropTypes.number.isRequired,\r\n    hasChildren: PropTypes.string.isRequired,\r\n    actionSetChildrenPresent: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetChildren: setChildren,\r\n    actionSetChildrenPresent: setChildrenPresent,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    numberOfChildren: state.userInput.numberOfChildren,\r\n    hasChildren: state.hasChildren,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { UserChildren as TestableUserChildren };\r\n\r\nexport default hocChain(UserChildren);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setEmail } from '../../ducks/userInput/inputEmail';\r\n\r\nconst UserEmail = ({\r\n    actionSetEmail,\r\n    email,\r\n}) =>{\r\n    const addEmail = event => {\r\n        actionSetEmail(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card card-container\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\"> What's your email ?</h5>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                        id=\"UserEmail-required\" \r\n                        className=\"form-control\" \r\n                        type=\"email\" \r\n                        placeholder=\"User Email\" \r\n                        onChange={addEmail}\r\n                        value={email}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nUserEmail.propTypes = {\r\n    actionSetEmail: PropTypes.func.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetEmail: setEmail,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    email: state.userInput.email,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { UserEmail as TestableUserEmail };\r\n\r\nexport default hocChain(UserEmail);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setAddress } from '../../ducks/userInput/inputAddress';\r\n\r\nconst UserAddress = ({\r\n    actionSetAddress,\r\n    address,\r\n}) =>{\r\n    const addAddress = event => {\r\n        actionSetAddress(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card card-container\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\"> What's your Address ?</h5>\r\n                <div className=\"form-group\">\r\n                    <input \r\n                        id=\"UserAddress-required\" \r\n                        className=\"form-control\" \r\n                        type=\"text\" \r\n                        placeholder=\"User Address\" \r\n                        onChange={addAddress}\r\n                        value={address}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nUserAddress.propTypes = {\r\n    actionSetAddress: PropTypes.func.isRequired,\r\n    address: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetAddress: setAddress,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    address: state.userInput.address,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { UserAddress as TestableUserAddress };\r\n\r\nexport default hocChain(UserAddress);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setOccupation } from '../../ducks/userInput/inputOccupation';\r\n\r\nconst UserOccupation = ({\r\n    actionSetOccupation,\r\n    occupation,\r\n}) =>{\r\n    const handleChange = (event) => {\r\n        actionSetOccupation(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-container\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">What's your Occupation ?</h5>\r\n                <div className=\"form-check\">\r\n                    <input \r\n                        className=\"form-check-input\" \r\n                        type=\"radio\" \r\n                        name=\"occupation\" \r\n                        value=\"EMPLOYED\"\r\n                        checked={occupation === \"EMPLOYED\"}\r\n                        onChange={handleChange}\r\n                        id=\"occupation-id\"\r\n                    />\r\n                    <label className=\"form-check-label\">\r\n                        Employed\r\n                    </label>\r\n                </div>\r\n\r\n                <div className=\"form-check\"> \r\n                    <input \r\n                        className=\"form-check-input\" \r\n                        type=\"radio\" \r\n                        name=\"occupation\" \r\n                        value=\"STUDENT\" \r\n                        checked={occupation === \"STUDENT\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <label className=\"form-check-label\">\r\n                        Student\r\n                    </label>\r\n                </div>\r\n\r\n                <div className=\"form-check\">    \r\n                    <input \r\n                        className=\"form-check-input\" \r\n                        type=\"radio\" \r\n                        name=\"occupation\" \r\n                        value=\"SELF_EMPLOYED\"\r\n                        checked={occupation === \"SELF_EMPLOYED\"}\r\n                        onChange={handleChange} \r\n                    />\r\n                    <label className=\"form-check-label\">\r\n                        Self-employed\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nUserOccupation.propTypes = {\r\n    actionSetOccupation: PropTypes.func.isRequired,\r\n    occupation: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapDispatchAsProps = {\r\n    actionSetOccupation: setOccupation,\r\n}\r\n\r\nexport const mapStateToProps = state => ({\r\n    occupation: state.userInput.occupation,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\nexport { UserOccupation as TestableUserOccupation };\r\n\r\nexport default hocChain(UserOccupation);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport UserName from './CustomerInputs/UserName';\r\nimport UserChildren from './CustomerInputs/UserChildren';\r\nimport UserEmail from './CustomerInputs/UserEmail';\r\nimport UserAddress from './CustomerInputs/UserAddress';\r\nimport UserOccupation from './CustomerInputs/UserOccupation';\r\n\r\nconst GetStepContent = ({ activeStep }) => {\r\n    switch (activeStep) {\r\n        case 0:\r\n            return (\r\n                <UserName />\r\n            );\r\n        case 1:\r\n            return (\r\n                <UserAddress />\r\n            );\r\n        case 2:\r\n            return (\r\n                <UserOccupation />\r\n            );\r\n        case 3:\r\n            return (\r\n                <UserChildren />\r\n            );\r\n        case 4:\r\n            return (\r\n                <UserEmail />\r\n            );\r\n        default:\r\n            return <UserName />;\r\n    }\r\n}\r\n\r\nGetStepContent.propTypes = {\r\n    activeStep:  PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    activeStep: state.activeStep,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps),\r\n);\r\n\r\nexport { GetStepContent as TestableGetStepContent };\r\n\r\nexport default hocChain(GetStepContent);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { setStepsLength } from '../ducks/stepsLength';\r\nimport { setStepAsCompleted } from '../ducks/completedSteps';\r\nimport { setActiveStep } from '../ducks/activeStep';\r\nimport { QUESTIONNAIRE_STEPS } from '../constants/steps';\r\nimport AppStepper from './Shared/AppStepper';\r\nimport Result from './Result';\r\nimport ActionBar from './Shared/ActionBar';\r\nimport handleResult from '../thunks/handleResult';\r\nimport GetStepContent from './GetStepContent';\r\n\r\nconst Questionnaire = ({ \r\n    stepsLength,\r\n    activeStep, \r\n    actionSetStepsLength,\r\n    completedSteps,\r\n    actionSetStepAsCompleted,\r\n    actionSetActiveStep,\r\n    actionHandleResult, \r\n}) => {\r\n    React.useEffect(() => {\r\n        // getting all steps required for Questionnaire \r\n        // and set FirstName as a active step for persistance\r\n        actionSetStepsLength();\r\n        actionSetActiveStep(0);\r\n    }, [actionSetStepsLength, actionSetActiveStep]);\r\n\r\n    const allStepsCompleted = () => {\r\n        return Object.keys(completedSteps).length === stepsLength;\r\n    };\r\n\r\n    const handleNext = () => {\r\n        const newActiveStep = (activeStep === stepsLength - 1) \r\n        && !(allStepsCompleted())\r\n        ? // It's the last step, but not all steps have been completed,\r\n        // find the first step that has been completed\r\n        QUESTIONNAIRE_STEPS.findIndex((step, i) => !(i in completedSteps))\r\n        : activeStep + 1;\r\n        actionSetActiveStep(newActiveStep);\r\n\r\n        // if all steps completed, make an API call\r\n        if(allStepsCompleted()) {\r\n            actionHandleResult();\r\n        }\r\n    };\r\n    \r\n    const handleComplete = () => {\r\n        const newCompleted = completedSteps;\r\n        // updating object with completed ones\r\n        newCompleted[activeStep] = true;\r\n        actionSetStepAsCompleted(newCompleted);\r\n        handleNext();\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <AppStepper steps={QUESTIONNAIRE_STEPS} />\r\n            {\r\n                allStepsCompleted() ? (\r\n                    <Result allStepsCompleted={allStepsCompleted} />\r\n                ) : (\r\n                <React.Fragment>\r\n                    <div className=\"row\">\r\n                        <div className=\"container\">\r\n                            <div className=\"col-md-4\"></div>\r\n                            <div className=\"col-md-6\">\r\n                                <GetStepContent />\r\n                                <ActionBar handleComplete={handleComplete} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}    \r\n\r\nQuestionnaire.propTypes = {\r\n    stepsLength: PropTypes.number.isRequired,\r\n    activeStep: PropTypes.number.isRequired,\r\n    actionSetStepsLength: PropTypes.func.isRequired,\r\n    actionSetStepAsCompleted: PropTypes.func.isRequired,\r\n    actionSetActiveStep: PropTypes.func.isRequired,\r\n    completedSteps: PropTypes.shape({}).isRequired,\r\n    actionHandleResult: PropTypes.func.isRequired,\r\n};\r\n\r\n// Actions dispatchers\r\nconst mapDispatchAsProps = {\r\n    actionSetStepsLength: setStepsLength,\r\n    actionSetStepAsCompleted: setStepAsCompleted,\r\n    actionSetActiveStep: setActiveStep,\r\n    actionHandleResult: handleResult,\r\n}\r\n\r\n// Redux store access\r\nexport const mapStateToProps = state => ({\r\n    stepsLength: state.stepsLength,\r\n    completedSteps: state.completedSteps,\r\n    activeStep: state.activeStep,\r\n});\r\n\r\nconst hocChain = compose(\r\n    connect(mapStateToProps, mapDispatchAsProps),\r\n);\r\n\r\n// this is required for creating a wrapper for test coverage\r\nexport { Questionnaire as TestableQuestionnaire };\r\n\r\nexport default hocChain(Questionnaire);","import { combineReducers } from 'redux';\r\nimport { inputNameReducer as firstName } from '../ducks/userInput/inputName';\r\nimport { inputAddressReducer as address } from '../ducks/userInput/inputAddress';\r\nimport { inputOccupationReducer as occupation } from '../ducks/userInput/inputOccupation';\r\nimport { inputChildrenReducer as numberOfChildren } from '../ducks/userInput/inputChildren';\r\nimport { inputEmailReducer as email } from '../ducks/userInput/inputEmail';\r\n\r\nexport default combineReducers({\r\n    firstName,\r\n    address,\r\n    occupation,\r\n    numberOfChildren,\r\n    email,\r\n});","import { combineReducers } from 'redux';\r\nimport { stepsLengthReducer as stepsLength } from '../ducks/stepsLength';\r\nimport { completedStepsReducer as completedSteps } from '../ducks/completedSteps';\r\nimport { activeStepReducer as activeStep } from '../ducks/activeStep';\r\nimport { hasChildrenReducer as hasChildren } from '../ducks/userInput/hasChildren';\r\nimport { loadingStatusReducer as loadingStatus } from '../ducks/loadingStatus';\r\nimport { searchResultsReducer as searchResults } from '../ducks/searchResults';\r\nimport userInput from './userInput';\r\n\r\nexport default combineReducers({\r\n    stepsLength,\r\n    completedSteps,\r\n    activeStep,\r\n    userInput,\r\n    hasChildren,\r\n    loadingStatus,\r\n    searchResults,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from 'redux-thunk';\nimport Questionnaire from './components/Questionnaire';\nimport rootReducer from './reducers/index';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n  \nconst store = createStore(\n  persistedReducer,\n  applyMiddleware(thunk)\n);\n\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Questionnaire />\n    </PersistGate>  \n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}